{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reflect Tables into SQLAlchemy ORM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func, inspect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can view all of the classes that automap found\n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "measurement = Base.classes.measurement\n",
    "station = Base.classes.station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id INTEGER\n",
      "station TEXT\n",
      "name TEXT\n",
      "latitude FLOAT\n",
      "longitude FLOAT\n",
      "elevation FLOAT\n"
     ]
    }
   ],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)\n",
    "\n",
    "inspector = inspect(engine)\n",
    "columns = inspector.get_columns('station')\n",
    "for c in columns:\n",
    "    print(c['name'], c[\"type\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Climate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'2016-08-24': {'Precipitation': 1.555},\n",
       " '2016-08-25': {'Precipitation': 0.07714285714285715},\n",
       " '2016-08-26': {'Precipitation': 0.016666666666666666},\n",
       " '2016-08-27': {'Precipitation': 0.06399999999999999},\n",
       " '2016-08-28': {'Precipitation': 0.5166666666666666},\n",
       " '2016-08-29': {'Precipitation': 0.24333333333333332},\n",
       " '2016-08-30': {'Precipitation': 0.011666666666666667},\n",
       " '2016-08-31': {'Precipitation': 0.636},\n",
       " '2016-09-01': {'Precipitation': 0.006},\n",
       " '2016-09-02': {'Precipitation': 0.05},\n",
       " '2016-09-03': {'Precipitation': 0.25400000000000006},\n",
       " '2016-09-04': {'Precipitation': 0.276},\n",
       " '2016-09-05': {'Precipitation': 0.085},\n",
       " '2016-09-06': {'Precipitation': 0.24600000000000005},\n",
       " '2016-09-07': {'Precipitation': 0.3333333333333333},\n",
       " '2016-09-08': {'Precipitation': 0.07666666666666667},\n",
       " '2016-09-09': {'Precipitation': 0.17833333333333334},\n",
       " '2016-09-10': {'Precipitation': 0.28},\n",
       " '2016-09-11': {'Precipitation': 0.25},\n",
       " '2016-09-12': {'Precipitation': 0.308},\n",
       " '2016-09-13': {'Precipitation': 0.45166666666666666},\n",
       " '2016-09-14': {'Precipitation': 2.3800000000000003},\n",
       " '2016-09-15': {'Precipitation': 0.8266666666666667},\n",
       " '2016-09-16': {'Precipitation': 0.11714285714285715},\n",
       " '2016-09-17': {'Precipitation': 0.136},\n",
       " '2016-09-18': {'Precipitation': 0.10600000000000001},\n",
       " '2016-09-19': {'Precipitation': 0.064},\n",
       " '2016-09-20': {'Precipitation': 0.14714285714285716},\n",
       " '2016-09-21': {'Precipitation': 0.19499999999999998},\n",
       " '2016-09-22': {'Precipitation': 0.20571428571428574},\n",
       " '2016-09-23': {'Precipitation': 0.22428571428571428},\n",
       " '2016-09-24': {'Precipitation': 0.04666666666666667},\n",
       " '2016-09-25': {'Precipitation': 0.015000000000000001},\n",
       " '2016-09-26': {'Precipitation': 0.2783333333333334},\n",
       " '2016-09-27': {'Precipitation': 0.22666666666666666},\n",
       " '2016-09-28': {'Precipitation': 0.018571428571428572},\n",
       " '2016-09-29': {'Precipitation': 0.4271428571428571},\n",
       " '2016-09-30': {'Precipitation': 0.19166666666666668},\n",
       " '2016-10-01': {'Precipitation': 0.2416666666666667},\n",
       " '2016-10-02': {'Precipitation': 0.12},\n",
       " '2016-10-03': {'Precipitation': 0.115},\n",
       " '2016-10-04': {'Precipitation': 0.5816666666666667},\n",
       " '2016-10-05': {'Precipitation': 0.1366666666666667},\n",
       " '2016-10-06': {'Precipitation': 0.022857142857142857},\n",
       " '2016-10-07': {'Precipitation': 0.0016666666666666668},\n",
       " '2016-10-08': {'Precipitation': 0.008},\n",
       " '2016-10-09': {'Precipitation': 0.0},\n",
       " '2016-10-10': {'Precipitation': 0.0},\n",
       " '2016-10-11': {'Precipitation': 0.115},\n",
       " '2016-10-12': {'Precipitation': 0.013333333333333334},\n",
       " '2016-10-13': {'Precipitation': 0.013333333333333334},\n",
       " '2016-10-14': {'Precipitation': 0.0},\n",
       " '2016-10-15': {'Precipitation': 0.065},\n",
       " '2016-10-16': {'Precipitation': 0.0},\n",
       " '2016-10-17': {'Precipitation': 0.11000000000000001},\n",
       " '2016-10-18': {'Precipitation': 0.09999999999999999},\n",
       " '2016-10-19': {'Precipitation': 0.028333333333333332},\n",
       " '2016-10-20': {'Precipitation': 0.202},\n",
       " '2016-10-21': {'Precipitation': 0.064},\n",
       " '2016-10-22': {'Precipitation': 0.354},\n",
       " '2016-10-23': {'Precipitation': 0.05600000000000001},\n",
       " '2016-10-24': {'Precipitation': 0.13166666666666665},\n",
       " '2016-10-25': {'Precipitation': 0.15714285714285717},\n",
       " '2016-10-26': {'Precipitation': 0.04833333333333334},\n",
       " '2016-10-27': {'Precipitation': 0.31},\n",
       " '2016-10-28': {'Precipitation': 0.09500000000000001},\n",
       " '2016-10-29': {'Precipitation': 0.10666666666666667},\n",
       " '2016-10-30': {'Precipitation': 0.26499999999999996},\n",
       " '2016-10-31': {'Precipitation': 0.26833333333333337},\n",
       " '2016-11-01': {'Precipitation': 0.035},\n",
       " '2016-11-02': {'Precipitation': 0.006666666666666667},\n",
       " '2016-11-03': {'Precipitation': 0.0033333333333333335},\n",
       " '2016-11-04': {'Precipitation': 0.01},\n",
       " '2016-11-05': {'Precipitation': 0.07500000000000001},\n",
       " '2016-11-06': {'Precipitation': 0.013333333333333334},\n",
       " '2016-11-07': {'Precipitation': 0.03},\n",
       " '2016-11-08': {'Precipitation': 0.18666666666666668},\n",
       " '2016-11-09': {'Precipitation': 0.05714285714285715},\n",
       " '2016-11-10': {'Precipitation': 0.0016666666666666668},\n",
       " '2016-11-11': {'Precipitation': 0.0},\n",
       " '2016-11-12': {'Precipitation': 0.0},\n",
       " '2016-11-13': {'Precipitation': 0.0},\n",
       " '2016-11-14': {'Precipitation': 0.02142857142857143},\n",
       " '2016-11-15': {'Precipitation': 0.008333333333333333},\n",
       " '2016-11-16': {'Precipitation': 0.25666666666666665},\n",
       " '2016-11-17': {'Precipitation': 0.01},\n",
       " '2016-11-18': {'Precipitation': 0.0075},\n",
       " '2016-11-19': {'Precipitation': 0.095},\n",
       " '2016-11-20': {'Precipitation': 0.23750000000000002},\n",
       " '2016-11-21': {'Precipitation': 0.6159999999999999},\n",
       " '2016-11-22': {'Precipitation': 1.0019999999999998},\n",
       " '2016-11-23': {'Precipitation': 0.134},\n",
       " '2016-11-24': {'Precipitation': 0.296},\n",
       " '2016-11-25': {'Precipitation': 0.264},\n",
       " '2016-11-26': {'Precipitation': 0.085},\n",
       " '2016-11-27': {'Precipitation': 0.09166666666666667},\n",
       " '2016-11-28': {'Precipitation': 0.12},\n",
       " '2016-11-29': {'Precipitation': 0.07166666666666667},\n",
       " '2016-11-30': {'Precipitation': 0.17666666666666667},\n",
       " '2016-12-01': {'Precipitation': 0.295},\n",
       " '2016-12-02': {'Precipitation': 0.3933333333333333},\n",
       " '2016-12-03': {'Precipitation': 0.45166666666666666},\n",
       " '2016-12-04': {'Precipitation': 0.13333333333333333},\n",
       " '2016-12-05': {'Precipitation': 0.54},\n",
       " '2016-12-06': {'Precipitation': 0.008},\n",
       " '2016-12-07': {'Precipitation': 0.076},\n",
       " '2016-12-08': {'Precipitation': 0.06571428571428573},\n",
       " '2016-12-09': {'Precipitation': 0.37},\n",
       " '2016-12-10': {'Precipitation': 0.026000000000000002},\n",
       " '2016-12-11': {'Precipitation': 0.05},\n",
       " '2016-12-12': {'Precipitation': 0.008333333333333333},\n",
       " '2016-12-13': {'Precipitation': 0.12833333333333333},\n",
       " '2016-12-14': {'Precipitation': 0.25},\n",
       " '2016-12-15': {'Precipitation': 0.043333333333333335},\n",
       " '2016-12-16': {'Precipitation': 0.006666666666666667},\n",
       " '2016-12-17': {'Precipitation': 0.07},\n",
       " '2016-12-18': {'Precipitation': 0.178},\n",
       " '2016-12-19': {'Precipitation': 0.07},\n",
       " '2016-12-20': {'Precipitation': 0.005},\n",
       " '2016-12-21': {'Precipitation': 0.12857142857142856},\n",
       " '2016-12-22': {'Precipitation': 0.4116666666666666},\n",
       " '2016-12-23': {'Precipitation': 0.205},\n",
       " '2016-12-24': {'Precipitation': 0.27},\n",
       " '2016-12-25': {'Precipitation': 0.086},\n",
       " '2016-12-26': {'Precipitation': 0.40800000000000003},\n",
       " '2016-12-27': {'Precipitation': 0.04},\n",
       " '2016-12-28': {'Precipitation': 0.06833333333333334},\n",
       " '2016-12-29': {'Precipitation': 0.3966666666666667},\n",
       " '2016-12-30': {'Precipitation': 0.5583333333333333},\n",
       " '2016-12-31': {'Precipitation': 0.42799999999999994},\n",
       " '2017-01-01': {'Precipitation': 0.06999999999999999},\n",
       " '2017-01-02': {'Precipitation': 0.004},\n",
       " '2017-01-03': {'Precipitation': 0.0},\n",
       " '2017-01-04': {'Precipitation': 0.03},\n",
       " '2017-01-05': {'Precipitation': 0.15833333333333333},\n",
       " '2017-01-06': {'Precipitation': 0.13333333333333333},\n",
       " '2017-01-07': {'Precipitation': 0.01},\n",
       " '2017-01-08': {'Precipitation': 0.01},\n",
       " '2017-01-09': {'Precipitation': 0.0},\n",
       " '2017-01-10': {'Precipitation': 0.0},\n",
       " '2017-01-11': {'Precipitation': 0.0},\n",
       " '2017-01-12': {'Precipitation': 0.0},\n",
       " '2017-01-13': {'Precipitation': 0.0},\n",
       " '2017-01-14': {'Precipitation': 0.002},\n",
       " '2017-01-15': {'Precipitation': 0.0025},\n",
       " '2017-01-16': {'Precipitation': 0.0},\n",
       " '2017-01-17': {'Precipitation': 0.0},\n",
       " '2017-01-18': {'Precipitation': 0.011666666666666667},\n",
       " '2017-01-19': {'Precipitation': 0.0033333333333333335},\n",
       " '2017-01-20': {'Precipitation': 0.0},\n",
       " '2017-01-21': {'Precipitation': 0.04666666666666667},\n",
       " '2017-01-22': {'Precipitation': 0.20400000000000001},\n",
       " '2017-01-23': {'Precipitation': 0.188},\n",
       " '2017-01-24': {'Precipitation': 0.45},\n",
       " '2017-01-25': {'Precipitation': 0.716},\n",
       " '2017-01-26': {'Precipitation': 0.015714285714285715},\n",
       " '2017-01-27': {'Precipitation': 0.008571428571428572},\n",
       " '2017-01-28': {'Precipitation': 0.028000000000000004},\n",
       " '2017-01-29': {'Precipitation': 0.2475},\n",
       " '2017-01-30': {'Precipitation': 0.008333333333333333},\n",
       " '2017-01-31': {'Precipitation': 0.0},\n",
       " '2017-02-01': {'Precipitation': 0.0},\n",
       " '2017-02-02': {'Precipitation': 0.0},\n",
       " '2017-02-03': {'Precipitation': 0.0},\n",
       " '2017-02-04': {'Precipitation': 0.0},\n",
       " '2017-02-05': {'Precipitation': 0.0},\n",
       " '2017-02-06': {'Precipitation': 0.06333333333333334},\n",
       " '2017-02-07': {'Precipitation': 1.0571428571428572},\n",
       " '2017-02-08': {'Precipitation': 0.1542857142857143},\n",
       " '2017-02-09': {'Precipitation': 0.002857142857142857},\n",
       " '2017-02-10': {'Precipitation': 0.0},\n",
       " '2017-02-11': {'Precipitation': 1.866666666666667},\n",
       " '2017-02-12': {'Precipitation': 1.7466666666666668},\n",
       " '2017-02-13': {'Precipitation': 0.4866666666666666},\n",
       " '2017-02-14': {'Precipitation': 0.0016666666666666668},\n",
       " '2017-02-15': {'Precipitation': 0.016},\n",
       " '2017-02-16': {'Precipitation': 0.37000000000000005},\n",
       " '2017-02-17': {'Precipitation': 0.17500000000000002},\n",
       " '2017-02-18': {'Precipitation': 0.0025},\n",
       " '2017-02-19': {'Precipitation': 0.0475},\n",
       " '2017-02-20': {'Precipitation': 0.0},\n",
       " '2017-02-21': {'Precipitation': 0.026000000000000002},\n",
       " '2017-02-22': {'Precipitation': 0.13000000000000003},\n",
       " '2017-02-23': {'Precipitation': 0.0014285714285714286},\n",
       " '2017-02-24': {'Precipitation': 0.0},\n",
       " '2017-02-25': {'Precipitation': 0.0375},\n",
       " '2017-02-26': {'Precipitation': 0.0},\n",
       " '2017-02-27': {'Precipitation': 0.0},\n",
       " '2017-02-28': {'Precipitation': 0.1366666666666667},\n",
       " '2017-03-01': {'Precipitation': 1.66},\n",
       " '2017-03-02': {'Precipitation': 1.0933333333333335},\n",
       " '2017-03-03': {'Precipitation': 0.37166666666666676},\n",
       " '2017-03-04': {'Precipitation': 0.0},\n",
       " '2017-03-05': {'Precipitation': 0.3025},\n",
       " '2017-03-06': {'Precipitation': 0.135},\n",
       " '2017-03-07': {'Precipitation': 0.0},\n",
       " '2017-03-08': {'Precipitation': 0.0},\n",
       " '2017-03-09': {'Precipitation': 0.3266666666666667},\n",
       " '2017-03-10': {'Precipitation': 0.04142857142857143},\n",
       " '2017-03-11': {'Precipitation': 0.008},\n",
       " '2017-03-12': {'Precipitation': 0.0},\n",
       " '2017-03-13': {'Precipitation': 0.0},\n",
       " '2017-03-14': {'Precipitation': 0.008571428571428572},\n",
       " '2017-03-15': {'Precipitation': 0.01},\n",
       " '2017-03-16': {'Precipitation': 0.0},\n",
       " '2017-03-17': {'Precipitation': 0.144},\n",
       " '2017-03-18': {'Precipitation': 0.0},\n",
       " '2017-03-19': {'Precipitation': 0.0},\n",
       " '2017-03-20': {'Precipitation': 0.004},\n",
       " '2017-03-21': {'Precipitation': 0.015},\n",
       " '2017-03-22': {'Precipitation': 0.0},\n",
       " '2017-03-23': {'Precipitation': 0.008333333333333333},\n",
       " '2017-03-24': {'Precipitation': 0.18833333333333335},\n",
       " '2017-03-25': {'Precipitation': 0.394},\n",
       " '2017-03-26': {'Precipitation': 0.0},\n",
       " '2017-03-27': {'Precipitation': 0.002},\n",
       " '2017-03-28': {'Precipitation': 0.11833333333333335},\n",
       " '2017-03-29': {'Precipitation': 0.03166666666666667},\n",
       " '2017-03-30': {'Precipitation': 0.030000000000000006},\n",
       " '2017-03-31': {'Precipitation': 0.0016666666666666668},\n",
       " '2017-04-01': {'Precipitation': 0.06833333333333334},\n",
       " '2017-04-02': {'Precipitation': 0.0},\n",
       " '2017-04-03': {'Precipitation': 0.10999999999999999},\n",
       " '2017-04-04': {'Precipitation': 0.02142857142857143},\n",
       " '2017-04-05': {'Precipitation': 0.09428571428571429},\n",
       " '2017-04-06': {'Precipitation': 0.008571428571428572},\n",
       " '2017-04-07': {'Precipitation': 0.0},\n",
       " '2017-04-08': {'Precipitation': 0.0},\n",
       " '2017-04-09': {'Precipitation': 0.0},\n",
       " '2017-04-10': {'Precipitation': 0.0033333333333333335},\n",
       " '2017-04-11': {'Precipitation': 0.07833333333333335},\n",
       " '2017-04-12': {'Precipitation': 0.18000000000000002},\n",
       " '2017-04-13': {'Precipitation': 0.18166666666666664},\n",
       " '2017-04-14': {'Precipitation': 1.1199999999999999},\n",
       " '2017-04-15': {'Precipitation': 0.34800000000000003},\n",
       " '2017-04-16': {'Precipitation': 0.21399999999999997},\n",
       " '2017-04-17': {'Precipitation': 0.614},\n",
       " '2017-04-18': {'Precipitation': 0.48},\n",
       " '2017-04-19': {'Precipitation': 0.03333333333333333},\n",
       " '2017-04-20': {'Precipitation': 0.13},\n",
       " '2017-04-21': {'Precipitation': 1.3966666666666667},\n",
       " '2017-04-22': {'Precipitation': 0.992},\n",
       " '2017-04-23': {'Precipitation': 0.11499999999999999},\n",
       " '2017-04-24': {'Precipitation': 0.015000000000000001},\n",
       " '2017-04-25': {'Precipitation': 0.0},\n",
       " '2017-04-26': {'Precipitation': 0.065},\n",
       " '2017-04-27': {'Precipitation': 0.07},\n",
       " '2017-04-28': {'Precipitation': 0.7066666666666667},\n",
       " '2017-04-29': {'Precipitation': 1.3399999999999999},\n",
       " '2017-04-30': {'Precipitation': 1.07},\n",
       " '2017-05-01': {'Precipitation': 0.135},\n",
       " '2017-05-02': {'Precipitation': 0.008333333333333333},\n",
       " '2017-05-03': {'Precipitation': 0.006},\n",
       " '2017-05-04': {'Precipitation': 0.016},\n",
       " '2017-05-05': {'Precipitation': 0.06333333333333334},\n",
       " '2017-05-06': {'Precipitation': 0.01},\n",
       " '2017-05-07': {'Precipitation': 0.024},\n",
       " '2017-05-08': {'Precipitation': 0.5016666666666666},\n",
       " '2017-05-09': {'Precipitation': 0.9260000000000002},\n",
       " '2017-05-10': {'Precipitation': 0.14333333333333334},\n",
       " '2017-05-11': {'Precipitation': 0.12},\n",
       " '2017-05-12': {'Precipitation': 0.032},\n",
       " '2017-05-13': {'Precipitation': 0.048},\n",
       " '2017-05-14': {'Precipitation': 0.244},\n",
       " '2017-05-15': {'Precipitation': 0.176},\n",
       " '2017-05-16': {'Precipitation': 0.06999999999999999},\n",
       " '2017-05-17': {'Precipitation': 0.025000000000000005},\n",
       " '2017-05-18': {'Precipitation': 0.1416666666666667},\n",
       " '2017-05-19': {'Precipitation': 0.01},\n",
       " '2017-05-20': {'Precipitation': 0.0075},\n",
       " '2017-05-21': {'Precipitation': 0.002},\n",
       " '2017-05-22': {'Precipitation': 0.072},\n",
       " '2017-05-23': {'Precipitation': 0.11833333333333333},\n",
       " '2017-05-24': {'Precipitation': 0.6483333333333333},\n",
       " '2017-05-25': {'Precipitation': 0.36999999999999994},\n",
       " '2017-05-26': {'Precipitation': 0.004},\n",
       " '2017-05-27': {'Precipitation': 0.085},\n",
       " '2017-05-28': {'Precipitation': 0.06833333333333334},\n",
       " '2017-05-29': {'Precipitation': 0.084},\n",
       " '2017-05-30': {'Precipitation': 0.34600000000000003},\n",
       " '2017-05-31': {'Precipitation': 0.074},\n",
       " '2017-06-01': {'Precipitation': 0.006666666666666667},\n",
       " '2017-06-02': {'Precipitation': 0.06799999999999999},\n",
       " '2017-06-03': {'Precipitation': 0.12200000000000003},\n",
       " '2017-06-04': {'Precipitation': 0.19166666666666665},\n",
       " '2017-06-05': {'Precipitation': 0.013333333333333334},\n",
       " '2017-06-06': {'Precipitation': 0.0},\n",
       " '2017-06-07': {'Precipitation': 0.0016666666666666668},\n",
       " '2017-06-08': {'Precipitation': 0.005},\n",
       " '2017-06-09': {'Precipitation': 0.008},\n",
       " '2017-06-10': {'Precipitation': 0.306},\n",
       " '2017-06-11': {'Precipitation': 0.3583333333333334},\n",
       " '2017-06-12': {'Precipitation': 0.2916666666666667},\n",
       " '2017-06-13': {'Precipitation': 0.22999999999999998},\n",
       " '2017-06-14': {'Precipitation': 0.26166666666666666},\n",
       " '2017-06-15': {'Precipitation': 0.45166666666666666},\n",
       " '2017-06-16': {'Precipitation': 0.03333333333333333},\n",
       " '2017-06-17': {'Precipitation': 0.09000000000000001},\n",
       " '2017-06-18': {'Precipitation': 0.23666666666666666},\n",
       " '2017-06-19': {'Precipitation': 0.12166666666666669},\n",
       " '2017-06-20': {'Precipitation': 0.11000000000000001},\n",
       " '2017-06-21': {'Precipitation': 0.1275},\n",
       " '2017-06-22': {'Precipitation': 0.07333333333333335},\n",
       " '2017-06-23': {'Precipitation': 0.11166666666666668},\n",
       " '2017-06-24': {'Precipitation': 0.12799999999999997},\n",
       " '2017-06-25': {'Precipitation': 0.12},\n",
       " '2017-06-26': {'Precipitation': 0.02},\n",
       " '2017-06-27': {'Precipitation': 0.018333333333333333},\n",
       " '2017-06-28': {'Precipitation': 0.005},\n",
       " '2017-06-29': {'Precipitation': 0.011666666666666667},\n",
       " '2017-06-30': {'Precipitation': 0.07428571428571429},\n",
       " '2017-07-01': {'Precipitation': 0.065},\n",
       " '2017-07-02': {'Precipitation': 0.18},\n",
       " '2017-07-03': {'Precipitation': 0.14800000000000002},\n",
       " '2017-07-04': {'Precipitation': 0.0375},\n",
       " '2017-07-05': {'Precipitation': 0.0},\n",
       " '2017-07-06': {'Precipitation': 0.004},\n",
       " '2017-07-07': {'Precipitation': 0.1},\n",
       " '2017-07-08': {'Precipitation': 0.016666666666666666},\n",
       " '2017-07-09': {'Precipitation': 0.03333333333333333},\n",
       " '2017-07-10': {'Precipitation': 0.006666666666666667},\n",
       " '2017-07-11': {'Precipitation': 0.005},\n",
       " '2017-07-12': {'Precipitation': 0.060000000000000005},\n",
       " '2017-07-13': {'Precipitation': 0.3016666666666667},\n",
       " '2017-07-14': {'Precipitation': 0.15833333333333335},\n",
       " '2017-07-15': {'Precipitation': 0.03166666666666667},\n",
       " '2017-07-16': {'Precipitation': 0.135},\n",
       " '2017-07-17': {'Precipitation': 0.15166666666666667},\n",
       " '2017-07-18': {'Precipitation': 0.3614285714285714},\n",
       " '2017-07-19': {'Precipitation': 0.06833333333333334},\n",
       " '2017-07-20': {'Precipitation': 0.17714285714285713},\n",
       " '2017-07-21': {'Precipitation': 0.018571428571428572},\n",
       " '2017-07-22': {'Precipitation': 0.7366666666666668},\n",
       " '2017-07-23': {'Precipitation': 0.22600000000000003},\n",
       " '2017-07-24': {'Precipitation': 0.6539999999999999},\n",
       " '2017-07-25': {'Precipitation': 0.08714285714285715},\n",
       " '2017-07-26': {'Precipitation': 0.08333333333333333},\n",
       " '2017-07-27': {'Precipitation': 0.0016666666666666668},\n",
       " '2017-07-28': {'Precipitation': 0.11},\n",
       " '2017-07-29': {'Precipitation': 0.10166666666666667},\n",
       " '2017-07-30': {'Precipitation': 0.06},\n",
       " '2017-07-31': {'Precipitation': 0.0},\n",
       " '2017-08-01': {'Precipitation': 0.04666666666666666},\n",
       " '2017-08-02': {'Precipitation': 0.075},\n",
       " '2017-08-03': {'Precipitation': 0.017499999999999998},\n",
       " '2017-08-04': {'Precipitation': 0.015},\n",
       " '2017-08-05': {'Precipitation': 0.03},\n",
       " '2017-08-06': {'Precipitation': 0.0},\n",
       " '2017-08-07': {'Precipitation': 0.0125},\n",
       " '2017-08-08': {'Precipitation': 0.11000000000000001},\n",
       " '2017-08-09': {'Precipitation': 0.049999999999999996},\n",
       " '2017-08-10': {'Precipitation': 0.0175},\n",
       " '2017-08-11': {'Precipitation': 0.0},\n",
       " '2017-08-12': {'Precipitation': 0.04666666666666667},\n",
       " '2017-08-13': {'Precipitation': 0.0},\n",
       " '2017-08-14': {'Precipitation': 0.062},\n",
       " '2017-08-15': {'Precipitation': 0.164},\n",
       " '2017-08-16': {'Precipitation': 0.15250000000000002},\n",
       " '2017-08-17': {'Precipitation': 0.0475},\n",
       " '2017-08-18': {'Precipitation': 0.02},\n",
       " '2017-08-19': {'Precipitation': 0.03},\n",
       " '2017-08-20': {'Precipitation': 0.005},\n",
       " '2017-08-21': {'Precipitation': 0.19333333333333336},\n",
       " '2017-08-22': {'Precipitation': 0.16666666666666666}}"
      ]
     },
     "execution_count": 373,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to retrieve the last 12 months of precipitation data and plot the results#\n",
    "# Calculate the date 1 year ago from the last data point in the database#\n",
    "# Perform a query to retrieve the data and precipitation scores#\n",
    "# Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "# Sort the dataframe by date\n",
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "\n",
    "\n",
    "max_date = max(session.query(measurement.date))[0]\n",
    "\n",
    "start_date = datetime.strptime(max_date, '%Y-%m-%d').date()\n",
    "\n",
    "year_ago = start_date - dt.timedelta(days=365)\n",
    "\n",
    "# print(start_date)\n",
    "# print(year_ago)\n",
    "\n",
    "\n",
    "data = session.query(measurement.date,measurement.prcp).filter(measurement.prcp!='None').filter(measurement.date >year_ago).filter(measurement.date<start_date).all()\n",
    "\n",
    "\n",
    "prcp = pd.DataFrame(data).set_index('date')  \n",
    "prcp = df.rename(columns = {'prcp':'Precipitation'})\n",
    "\n",
    "prcp = prcp.sort_values('date')\n",
    "\n",
    "prcpavg = prcp.groupby('date')['Precipitation'].mean()\n",
    "\n",
    "didx = pd.date_range(start =min(prcp.index), freq ='Q',periods = 4)\n",
    "quarts = [x.strftime(\"%Y-%m-%d\") for x in didx]\n",
    "\n",
    "\n",
    "# create table\n",
    "fig = plt.figure(figsize=(15,5))\n",
    "ax = fig.add_subplot(1, 1, 1)     \n",
    "plt.plot(prcp.Precipitation, label = 'Precipitation')\n",
    "\n",
    "# Set major xticks to quarter\n",
    "ax.set_xticks(quarts, minor = False)\n",
    "\n",
    "#set gridlines and labels\n",
    "ax.grid(which = 'major', axis = 'both',alpha = 1)\n",
    "# plt.ylabel('Precipitation')\n",
    "plt.xlabel('Date')\n",
    "ax.set_xticklabels([])\n",
    "plt.tight_layout()\n",
    "ax.legend(loc = 'upper center')\n",
    "plt.savefig('../hw_images/Precipitation_BB.png')\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![precipitation](Images/precipitation.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Precipitation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2011.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.176549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.460667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Precipitation\n",
       "count    2011.000000\n",
       "mean        0.176549\n",
       "std         0.460667\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         0.020000\n",
       "75%         0.130000\n",
       "max         6.700000"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use Pandas to calcualte the summary statistics for the precipitation data\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![describe](Images/describe.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Design a query to show how many stations are available in this dataset?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(9)]"
      ]
     },
     "execution_count": 370,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to show how many stations are available in this dataset?\n",
    "Total_stations = session.query(func.count(station.station)).all()\n",
    "Total_stations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 308,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What are the most active stations? (i.e. what stations have the most rows)?\n",
    "# List the stations and the counts in descending order.\n",
    "\n",
    "stations = session.query(measurement.station, func.count(measurement.date)).group_by('station').order_by(func.count(measurement.date).desc()).all()\n",
    "stations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "# What are the most active stations? (i.e. what stations have the most rows)?\n",
    "# List the stations and the counts in descending order.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(54.0, 85.0, 71.66378066378067)]"
      ]
     },
     "execution_count": 372,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using the station id from the previous query, calculate the lowest temperature recorded, \n",
    "# highest temperature recorded, and average temperature most active station?\n",
    "\n",
    "temp = measurement.tobs\n",
    "mactive = stations[0][0]\n",
    "\n",
    "session.query(func.min(temp),func.max(temp),func.avg(temp)).filter(measurement.station == mactive).all()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Choose the station with the highest number of temperature observations.\n",
    "# Query the last 12 months of temperature observation data for this station and plot the results as a histogram\n",
    "\n",
    "\n",
    "\n",
    "# max_date2 = max(session.query(measurement.date).filter(measurement.station == mactive))[0]\n",
    "# # max_date2\n",
    "# start_date2 = datetime.strptime(max_date2, '%Y-%m-%d').date()\n",
    "\n",
    "# year_ago2 = start_date2 - dt.timedelta(days=365)\n",
    "\n",
    "# print('start date: ',max_date)\n",
    "# print('year ago',year_ago)\n",
    "\n",
    "\n",
    "temp_LastYear = session.query(measurement.date,temp).filter(measurement.station == mactive).filter(measurement.date>year_ago).filter(measurement.date<max_date).all()\n",
    "\n",
    "temp_df = pd.DataFrame(temp_LastYear,columns = ['Date','Temp'])\n",
    "\n",
    "\n",
    "plt.hist(temp_df['Temp'],label = 'Temp', bins = 12);\n",
    "plt.tight_layout()\n",
    "plt.xlabel('Temperature')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choose the station with the highest number of temperature observations.\n",
    "# Query the last 12 months of temperature observation data for this station and plot the results as a histogram\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![precipitation](Images/station-histogram.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(62.0, 69.57142857142857, 74.0)]\n"
     ]
    }
   ],
   "source": [
    "# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' \n",
    "# and return the minimum, average, and maximum temperatures for that range of dates\n",
    "def calc_temps(start_date, end_date):\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVE, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    return session.query(func.min(measurement.tobs), func.avg(measurement.tobs), func.max(measurement.tobs)).\\\n",
    "        filter(measurement.date >= start_date).filter(measurement.date <= end_date).all()\n",
    "\n",
    "# function usage example\n",
    "print(calc_temps('2012-02-28', '2012-03-05'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(58.0, 74.59058295964125, 87.0)]\n"
     ]
    }
   ],
   "source": [
    "# Use your previous function `calc_temps` to calculate the tmin, tavg, and tmax \n",
    "# for your trip using the previous year's data for those same dates.\n",
    "\n",
    "print(calc_temps(year_ago,max_date))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-08-26</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-08-27</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-08-28</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Temp\n",
       "0  2016-08-24  77.0\n",
       "1  2016-08-25  80.0\n",
       "2  2016-08-26  80.0\n",
       "3  2016-08-27  75.0\n",
       "4  2016-08-28  73.0"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results from your previous query as a bar chart. \n",
    "# Use \"Trip Avg Temp\" as your Title\n",
    "# Use the average temperature for the y value\n",
    "# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)\n",
    "\n",
    "\n",
    "y = temp_df['Temp'].mean()\n",
    "yerr = temp_df.Temp.max() - temp_df.Temp.min()\n",
    "\n",
    "fig = plt.figure(figsize=(3,9))\n",
    "ax = fig.add_subplot(1, 1, 1)  \n",
    "plt.bar(range(1),y, yerr = yerr, label = 'Temp', color =[(1,.85,.72)],alpha = 0.7);\n",
    "ax.set_xticklabels([])\n",
    "plt.title(\"Trip Avg Temp\")\n",
    "plt.tight_layout()\n",
    "plt.ylabel('Temp (F)')\n",
    "plt.grid(axis = 'x')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the results from your previous query as a bar chart. \n",
    "# Use \"Trip Avg Temp\" as your Title\n",
    "# Use the average temperature for the y value\n",
    "# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('USC00516128', 21.3331, -157.8025, 152.4, 146.66000000000005), ('USC00519281', 21.45167, -157.84888999999998, 32.9, 68.24000000000002), ('USC00513117', 21.4234, -157.8015, 14.6, 48.36000000000003), ('USC00519523', 21.33556, -157.71139, 19.5, 37.910000000000004), ('USC00514830', 21.5213, -157.8374, 7.0, 33.19), ('USC00519397', 21.2716, -157.8168, 3.0, 16.089999999999986), ('USC00517948', 21.3934, -157.9751, 11.9, 4.59)]\n"
     ]
    }
   ],
   "source": [
    "# Calculate the total amount of rainfall per weather station for your trip dates using the previous year's matching dates.\n",
    "# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation\n",
    "\n",
    "rainfall = session.query(measurement.station, station.latitude, station.longitude,station.elevation,func.sum(measurement.prcp)).filter(measurement.date>year_ago).filter(measurement.date<max_date).filter(measurement.station == station.station).group_by('station').order_by(func.sum(measurement.prcp).desc()).all()\n",
    "print(rainfall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the total amount of rainfall per weather station for your trip dates using the previous year's matching dates.\n",
    "# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optional Challenge Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(62.0, 69.15384615384616, 77.0)]"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a query that will calculate the daily normals \n",
    "# (i.e. the averages for tmin, tmax, and tavg for all historic data matching a specific month and day)\n",
    "\n",
    "def daily_normals(date):\n",
    "    \"\"\"Daily Normals.\n",
    "    \n",
    "    Args:\n",
    "        date (str): A date string in the format '%m-%d'\n",
    "        \n",
    "    Returns:\n",
    "        A list of tuples containing the daily normals, tmin, tavg, and tmax\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    sel = [func.min(measurement.tobs), func.avg(measurement.tobs), func.max(measurement.tobs)]\n",
    "    return session.query(*sel).filter(func.strftime(\"%m-%d\", measurement.date) == date).all()\n",
    "    \n",
    "daily_normals(\"01-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the daily normals for your trip\n",
    "# push each tuple of calculations into a list called `normals`\n",
    "normals = []\n",
    "\n",
    "# Set the start and end date of the trip\n",
    "\n",
    "start_date = datetime.strptime(max_date, '%Y-%m-%d').date()\n",
    "end_date =  start_date - dt.timedelta(days=10)\n",
    "\n",
    "# Use the start and end date to create a range of dates\n",
    "dates = session.query(measurement.date).filter(measurement.date<start_date).filter(measurement.date>end_date).all()\n",
    "\n",
    "\n",
    "# Strip off the year and save a list of %m-%d strings\n",
    "\n",
    "datez = [date[0] for date in dates]\n",
    "\n",
    "for date in datez:\n",
    "    x = datetime.strptime(date,'%Y-%m-%d')\n",
    "    normals.append(daily_normals(x.strftime('%m-%d')))\n",
    "\n",
    "\n",
    "# Loop through the list of %m-%d strings and calculate the normals for each date\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('USC00513117', 'KANEOHE 838.1, HI US', 21.4234, -157.8015, 14.6, 48.36000000000003, '2016-08-24'), ('USC00514830', 'KUALOA RANCH HEADQUARTERS 886.9, HI US', 21.5213, -157.8374, 7.0, 33.19, '2016-08-24'), ('USC00516128', 'MANOA LYON ARBO 785.2, HI US', 21.3331, -157.8025, 152.4, 146.66000000000005, '2016-08-24'), ('USC00517948', 'PEARL CITY, HI US', 21.3934, -157.9751, 11.9, 4.59, '2016-08-24'), ('USC00519281', 'WAIHEE 837.5, HI US', 21.45167, -157.84888999999998, 32.9, 68.24000000000002, '2016-08-24'), ('USC00519397', 'WAIKIKI 717.2, HI US', 21.2716, -157.8168, 3.0, 16.089999999999986, '2016-08-24'), ('USC00519523', 'WAIMANALO EXPERIMENTAL FARM, HI US', 21.33556, -157.71139, 19.5, 37.910000000000004, '2016-08-24')]\n",
      "2017-08-23\n",
      "2016-08-23\n"
     ]
    }
   ],
   "source": [
    "\n",
    "flask_rainfall = session.query(measurement.station, station.name, station.latitude, station.longitude,station.elevation,func.sum(measurement.prcp),measurement.date).filter(measurement.date>year_ago).filter(measurement.date<max_date).filter(measurement.station == station.station).group_by('station').all()\n",
    "print(flask_rainfall)\n",
    "print(max_date)\n",
    "print(year_ago)\n",
    "\n",
    "# station = [x[0] for x in flask_rainfall]\n",
    "# name = [x[1] for x in flask_rainfall]\n",
    "# latitude = [x[2] for x in flask_rainfall]\n",
    "# longitude = [x[3] for x in flask_rainfall]\n",
    "# elevation = [x[4] for x in flask_rainfall]\n",
    "# prcp = [x[5] for x in flask_rainfall]\n",
    "# date = [x[6] for x in flask_rainfall]\n",
    "\n",
    "\n",
    "\n",
    "# flask_data = {'date':date,\n",
    "#         'station':station,\n",
    "#        'name':name,\n",
    "#        'latitude':latitude,\n",
    "#        'longitude':longitude,\n",
    "#        'elevation':elevation,\n",
    "#        'prcp':prcp}\n",
    "# flask = pd.DataFrame(flask_rainfall)\n",
    "# flask.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the daily normals for your trip\n",
    "# push each tuple of calculations into a list called `normals`\n",
    "\n",
    "\n",
    "# Set the start and end date of the trip\n",
    "\n",
    "# Use the start and end date to create a range of dates\n",
    "# Stip off the year and save a list of %m-%d strings\n",
    "\n",
    "\n",
    "# Loop through the list of %m-%d strings and calculate the normals for each date\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tmin</th>\n",
       "      <th>tavg</th>\n",
       "      <th>tmax</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-08-14</th>\n",
       "      <td>71.0</td>\n",
       "      <td>76.777778</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-15</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.471698</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-18</th>\n",
       "      <td>70.0</td>\n",
       "      <td>76.923077</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-19</th>\n",
       "      <td>69.0</td>\n",
       "      <td>75.946429</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-20</th>\n",
       "      <td>68.0</td>\n",
       "      <td>76.452830</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-21</th>\n",
       "      <td>67.0</td>\n",
       "      <td>76.400000</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-22</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.471698</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-14</th>\n",
       "      <td>71.0</td>\n",
       "      <td>76.777778</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-15</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.471698</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-16</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.080000</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-17</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.125000</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-18</th>\n",
       "      <td>70.0</td>\n",
       "      <td>76.923077</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-19</th>\n",
       "      <td>69.0</td>\n",
       "      <td>75.946429</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-20</th>\n",
       "      <td>68.0</td>\n",
       "      <td>76.452830</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-21</th>\n",
       "      <td>67.0</td>\n",
       "      <td>76.400000</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-14</th>\n",
       "      <td>71.0</td>\n",
       "      <td>76.777778</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-15</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.471698</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-16</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.080000</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-17</th>\n",
       "      <td>69.0</td>\n",
       "      <td>76.125000</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-19</th>\n",
       "      <td>69.0</td>\n",
       "      <td>75.946429</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            tmin       tavg  tmax\n",
       "date                             \n",
       "2017-08-14  71.0  76.777778  82.0\n",
       "2017-08-15  69.0  76.471698  83.0\n",
       "2017-08-18  70.0  76.923077  84.0\n",
       "2017-08-19  69.0  75.946429  85.0\n",
       "2017-08-20  68.0  76.452830  82.0\n",
       "2017-08-21  67.0  76.400000  83.0\n",
       "2017-08-22  69.0  76.471698  84.0\n",
       "2017-08-14  71.0  76.777778  82.0\n",
       "2017-08-15  69.0  76.471698  83.0\n",
       "2017-08-16  69.0  76.080000  83.0\n",
       "2017-08-17  69.0  76.125000  83.0\n",
       "2017-08-18  70.0  76.923077  84.0\n",
       "2017-08-19  69.0  75.946429  85.0\n",
       "2017-08-20  68.0  76.452830  82.0\n",
       "2017-08-21  67.0  76.400000  83.0\n",
       "2017-08-14  71.0  76.777778  82.0\n",
       "2017-08-15  69.0  76.471698  83.0\n",
       "2017-08-16  69.0  76.080000  83.0\n",
       "2017-08-17  69.0  76.125000  83.0\n",
       "2017-08-19  69.0  75.946429  85.0"
      ]
     },
     "execution_count": 324,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the previous query results into a Pandas DataFrame and add the `trip_dates` range as the `date` index\n",
    "\n",
    "tmin = [x[0][0] for x in normals]\n",
    "tavg = [x[0][1] for x in normals]\n",
    "tmax = [x[0][2] for x in normals]\n",
    "\n",
    "data = {'date':datez,\n",
    "       'tmin':tmin,\n",
    "       'tavg':tavg,\n",
    "       'tmax':tmax}\n",
    "df = pd.DataFrame(data).set_index('date')\n",
    "\n",
    "df2 = df[0:11]\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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MGLECGbOnInD4WDt2rUkJycjyzLjx48nKCjopo971w2XDh06hK+vL1FRUdpr9evXx9vbW5S4uw1IksScOXMYNWoU06dPR5IkatasySuvvMKGDRs4duyY3iZWapKSkrhw4QJ5eXmMHDmSK1euMHr0aCIiIjh06BDvvfcev//+u95mVirMZjPp6ek0bNgQgGvXrgFw33330apVK3788Udt/beInpQNa9euJTc3l86dO5OZmcmQIUP497//zZo1a/j888/p0qULR44cAW5O87vOQd5///08/fTT1K9fH1Am0b29vQkNDcVisXi8V9y8t47RaGTp0qV8+OGH2u8A7du3x2g0EhsbCyDmfm8T99xzD6Ghoezfvx+z2cwnn3zCsGHDeOedd5g4cSJJSUmcOnVKbzMrHV5eXmzbtg2A4OBgrly5wrfffsubb75J165dmTNnDlarVURPyog333yTMWPG8N5779GnTx98fHxYunQpO3bsYP/+/TRr1oyJEyfetOZ3nYOsU6eOVohAkiS8vLwApbJPbq5re5/PPvvshjZvFvw5sizj6+tb7PUOHTrQr18/Zs+eTVZWlpj7vU20bNlbqJ9WAAAeW0lEQVSSmjVrMn78eI4ePeqh88CBA/Hy8mL37t06Wli5UDPjX331VZKTk2nTpg3jx4+nffv29OrVi4ceeojJkydjs9nEyL2MmT17Nr169SIwMJD33nuP+vXrExQURHBwMG+99RapqakcPHjwpo5Z6VulxMREVq9ezQcffMChQ4c8Ggij0aiNXNSRJMCsWbN49dVXCQ0N1cXmik5WVpaWrVdSb03VPCIiArPZzJYtWzxeF5QOd91BmQsDWLhwIV27duXKlSscPnwYq9Wqvad+/frce++95W5rZcJdd5NJ2Teyffv2rF+/nl69elGtWjVmzJjB/PnzAUhISMDLy4vAwEDdbK7oXL58mc2bN7Ny5Uri4+O11+fMmcO7776rRQjVKGBeXh61atXinnvuuanvMU2bNu2dMrP6DuPUqVNERERw/vx5jh49ysKFC7n33ntp3ry5tmjX4XBgNBr54osv6Ny5M/v37yc6OpodO3bQunVrvU+hwnHmzBn+9re/kZOTw4MPPkiVKlWKvUd1muHh4WzevJnjx48TGRkpwk23QEm6q53BgIAA2rRpw/Hjx1m3bh0Gg4HU1FS+/PJLNm/e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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# plt.fill_between( df2.index, df2.tmin, color=\"skyblue\", alpha=0.4,label = 'tmin')\n",
    "# plt.fill_between( df2.index, df2.tavg, color=\"orange\", alpha=0.3,label = 'tavg')\n",
    "# plt.fill_between( df2.index, df2.tmax, color=\"yellow\", alpha=0.2,label = 'tmax')\n",
    "\n",
    "# plt.stackplot(df2.index, df2.tmin,df2.tavg,df2.tmax, labels=['tmin','tavg','tmax'],stacked = False)\n",
    "\n",
    "df.plot.area(stacked = False)\n",
    "plt.legend(loc='lower left')\n",
    "plt.ylabel('Temperature (F)')\n",
    "plt.xlabel('Date')\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the daily normals as an area plot with `stacked=False`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dictionaries for flask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'2016-08-24': {'Temp': 77.0},\n",
       " '2016-08-25': {'Temp': 80.0},\n",
       " '2016-08-26': {'Temp': 80.0},\n",
       " '2016-08-27': {'Temp': 75.0},\n",
       " '2016-08-28': {'Temp': 73.0},\n",
       " '2016-08-29': {'Temp': 78.0},\n",
       " '2016-08-30': {'Temp': 77.0},\n",
       " '2016-08-31': {'Temp': 78.0},\n",
       " '2016-09-01': {'Temp': 80.0},\n",
       " '2016-09-02': {'Temp': 80.0},\n",
       " '2016-09-03': {'Temp': 78.0},\n",
       " '2016-09-04': {'Temp': 78.0},\n",
       " '2016-09-05': {'Temp': 78.0},\n",
       " '2016-09-06': {'Temp': 73.0},\n",
       " '2016-09-07': {'Temp': 74.0},\n",
       " '2016-09-08': {'Temp': 80.0},\n",
       " '2016-09-09': {'Temp': 79.0},\n",
       " '2016-09-10': {'Temp': 77.0},\n",
       " '2016-09-11': {'Temp': 80.0},\n",
       " '2016-09-12': {'Temp': 76.0},\n",
       " '2016-09-13': {'Temp': 79.0},\n",
       " '2016-09-14': {'Temp': 75.0},\n",
       " '2016-09-15': {'Temp': 79.0},\n",
       " '2016-09-16': {'Temp': 78.0},\n",
       " '2016-09-17': {'Temp': 79.0},\n",
       " '2016-09-18': {'Temp': 78.0},\n",
       " '2016-09-19': {'Temp': 78.0},\n",
       " '2016-09-20': {'Temp': 76.0},\n",
       " '2016-09-21': {'Temp': 74.0},\n",
       " '2016-09-22': {'Temp': 77.0},\n",
       " '2016-09-23': {'Temp': 78.0},\n",
       " '2016-09-24': {'Temp': 79.0},\n",
       " '2016-09-25': {'Temp': 79.0},\n",
       " '2016-09-26': {'Temp': 77.0},\n",
       " '2016-09-27': {'Temp': 80.0},\n",
       " '2016-09-28': {'Temp': 78.0},\n",
       " '2016-09-29': {'Temp': 78.0},\n",
       " '2016-09-30': {'Temp': 78.0},\n",
       " '2016-10-01': {'Temp': 77.0},\n",
       " '2016-10-02': {'Temp': 79.0},\n",
       " '2016-10-03': {'Temp': 79.0},\n",
       " '2016-10-04': {'Temp': 79.0},\n",
       " '2016-10-05': {'Temp': 79.0},\n",
       " '2016-10-06': {'Temp': 75.0},\n",
       " '2016-10-07': {'Temp': 76.0},\n",
       " '2016-10-08': {'Temp': 73.0},\n",
       " '2016-10-09': {'Temp': 72.0},\n",
       " '2016-10-10': {'Temp': 71.0},\n",
       " '2016-10-11': {'Temp': 77.0},\n",
       " '2016-10-12': {'Temp': 79.0},\n",
       " '2016-10-13': {'Temp': 78.0},\n",
       " '2016-10-14': {'Temp': 79.0},\n",
       " '2016-10-15': {'Temp': 77.0},\n",
       " '2016-10-16': {'Temp': 79.0},\n",
       " '2016-10-17': {'Temp': 77.0},\n",
       " '2016-10-18': {'Temp': 78.0},\n",
       " '2016-10-19': {'Temp': 78.0},\n",
       " '2016-10-20': {'Temp': 78.0},\n",
       " '2016-10-21': {'Temp': 78.0},\n",
       " '2016-10-22': {'Temp': 77.0},\n",
       " '2016-10-23': {'Temp': 74.0},\n",
       " '2016-10-24': {'Temp': 75.0},\n",
       " '2016-10-25': {'Temp': 76.0},\n",
       " '2016-10-26': {'Temp': 73.0},\n",
       " '2016-10-27': {'Temp': 76.0},\n",
       " '2016-10-28': {'Temp': 74.0},\n",
       " '2016-10-29': {'Temp': 77.0},\n",
       " '2016-10-30': {'Temp': 76.0},\n",
       " '2016-10-31': {'Temp': 76.0},\n",
       " '2016-11-01': {'Temp': 74.0},\n",
       " '2016-11-02': {'Temp': 75.0},\n",
       " '2016-11-03': {'Temp': 75.0},\n",
       " '2016-11-04': {'Temp': 75.0},\n",
       " '2016-11-05': {'Temp': 75.0},\n",
       " '2016-11-06': {'Temp': 71.0},\n",
       " '2016-11-07': {'Temp': 63.0},\n",
       " '2016-11-08': {'Temp': 70.0},\n",
       " '2016-11-09': {'Temp': 68.0},\n",
       " '2016-11-10': {'Temp': 67.0},\n",
       " '2016-11-11': {'Temp': 77.0},\n",
       " '2016-11-12': {'Temp': 74.0},\n",
       " '2016-11-13': {'Temp': 77.0},\n",
       " '2016-11-14': {'Temp': 76.0},\n",
       " '2016-11-15': {'Temp': 76.0},\n",
       " '2016-11-16': {'Temp': 75.0},\n",
       " '2016-11-17': {'Temp': 76.0},\n",
       " '2016-11-18': {'Temp': 75.0},\n",
       " '2016-11-19': {'Temp': 73.0},\n",
       " '2016-11-20': {'Temp': 75.0},\n",
       " '2016-11-21': {'Temp': 73.0},\n",
       " '2016-11-22': {'Temp': 75.0},\n",
       " '2016-11-23': {'Temp': 74.0},\n",
       " '2016-11-24': {'Temp': 75.0},\n",
       " '2016-11-25': {'Temp': 74.0},\n",
       " '2016-11-26': {'Temp': 75.0},\n",
       " '2016-11-27': {'Temp': 73.0},\n",
       " '2016-11-28': {'Temp': 75.0},\n",
       " '2016-11-29': {'Temp': 73.0},\n",
       " '2016-11-30': {'Temp': 73.0},\n",
       " '2016-12-01': {'Temp': 74.0},\n",
       " '2016-12-02': {'Temp': 70.0},\n",
       " '2016-12-03': {'Temp': 72.0},\n",
       " '2016-12-04': {'Temp': 70.0},\n",
       " '2016-12-05': {'Temp': 67.0},\n",
       " '2016-12-06': {'Temp': 67.0},\n",
       " '2016-12-07': {'Temp': 69.0},\n",
       " '2016-12-08': {'Temp': 70.0},\n",
       " '2016-12-09': {'Temp': 68.0},\n",
       " '2016-12-10': {'Temp': 69.0},\n",
       " '2016-12-11': {'Temp': 69.0},\n",
       " '2016-12-12': {'Temp': 66.0},\n",
       " '2016-12-13': {'Temp': 65.0},\n",
       " '2016-12-14': {'Temp': 68.0},\n",
       " '2016-12-15': {'Temp': 62.0},\n",
       " '2016-12-16': {'Temp': 75.0},\n",
       " '2016-12-17': {'Temp': 70.0},\n",
       " '2016-12-18': {'Temp': 69.0},\n",
       " '2016-12-19': {'Temp': 76.0},\n",
       " '2016-12-20': {'Temp': 76.0},\n",
       " '2016-12-21': {'Temp': 74.0},\n",
       " '2016-12-22': {'Temp': 73.0},\n",
       " '2016-12-23': {'Temp': 71.0},\n",
       " '2016-12-24': {'Temp': 74.0},\n",
       " '2016-12-25': {'Temp': 74.0},\n",
       " '2016-12-26': {'Temp': 72.0},\n",
       " '2016-12-27': {'Temp': 71.0},\n",
       " '2016-12-28': {'Temp': 72.0},\n",
       " '2016-12-29': {'Temp': 74.0},\n",
       " '2016-12-30': {'Temp': 69.0},\n",
       " '2016-12-31': {'Temp': 67.0},\n",
       " '2017-01-01': {'Temp': 72.0},\n",
       " '2017-01-02': {'Temp': 70.0},\n",
       " '2017-01-03': {'Temp': 64.0},\n",
       " '2017-01-04': {'Temp': 63.0},\n",
       " '2017-01-05': {'Temp': 63.0},\n",
       " '2017-01-06': {'Temp': 62.0},\n",
       " '2017-01-07': {'Temp': 70.0},\n",
       " '2017-01-08': {'Temp': 70.0},\n",
       " '2017-01-09': {'Temp': 62.0},\n",
       " '2017-01-10': {'Temp': 62.0},\n",
       " '2017-01-11': {'Temp': 63.0},\n",
       " '2017-01-12': {'Temp': 65.0},\n",
       " '2017-01-13': {'Temp': 69.0},\n",
       " '2017-01-14': {'Temp': 77.0},\n",
       " '2017-01-15': {'Temp': 70.0},\n",
       " '2017-01-16': {'Temp': 74.0},\n",
       " '2017-01-17': {'Temp': 69.0},\n",
       " '2017-01-18': {'Temp': 72.0},\n",
       " '2017-01-19': {'Temp': 71.0},\n",
       " '2017-01-20': {'Temp': 69.0},\n",
       " '2017-01-21': {'Temp': 71.0},\n",
       " '2017-01-22': {'Temp': 71.0},\n",
       " '2017-01-23': {'Temp': 72.0},\n",
       " '2017-01-24': {'Temp': 72.0},\n",
       " '2017-01-25': {'Temp': 69.0},\n",
       " '2017-01-26': {'Temp': 70.0},\n",
       " '2017-01-27': {'Temp': 66.0},\n",
       " '2017-01-28': {'Temp': 65.0},\n",
       " '2017-01-29': {'Temp': 69.0},\n",
       " '2017-01-30': {'Temp': 68.0},\n",
       " '2017-01-31': {'Temp': 68.0},\n",
       " '2017-02-01': {'Temp': 68.0},\n",
       " '2017-02-02': {'Temp': 59.0},\n",
       " '2017-02-03': {'Temp': 60.0},\n",
       " '2017-02-04': {'Temp': 70.0},\n",
       " '2017-02-05': {'Temp': 73.0},\n",
       " '2017-02-06': {'Temp': 75.0},\n",
       " '2017-02-07': {'Temp': 64.0},\n",
       " '2017-02-08': {'Temp': 59.0},\n",
       " '2017-02-09': {'Temp': 59.0},\n",
       " '2017-02-10': {'Temp': 62.0},\n",
       " '2017-02-11': {'Temp': 68.0},\n",
       " '2017-02-12': {'Temp': 70.0},\n",
       " '2017-02-13': {'Temp': 73.0},\n",
       " '2017-02-14': {'Temp': 79.0},\n",
       " '2017-02-15': {'Temp': 75.0},\n",
       " '2017-02-16': {'Temp': 65.0},\n",
       " '2017-02-17': {'Temp': 70.0},\n",
       " '2017-02-18': {'Temp': 74.0},\n",
       " '2017-02-19': {'Temp': 70.0},\n",
       " '2017-02-20': {'Temp': 70.0},\n",
       " '2017-02-21': {'Temp': 71.0},\n",
       " '2017-02-22': {'Temp': 71.0},\n",
       " '2017-02-23': {'Temp': 71.0},\n",
       " '2017-02-24': {'Temp': 69.0},\n",
       " '2017-02-25': {'Temp': 61.0},\n",
       " '2017-02-26': {'Temp': 67.0},\n",
       " '2017-02-27': {'Temp': 65.0},\n",
       " '2017-02-28': {'Temp': 72.0},\n",
       " '2017-03-01': {'Temp': 71.0},\n",
       " '2017-03-02': {'Temp': 73.0},\n",
       " '2017-03-03': {'Temp': 72.0},\n",
       " '2017-03-04': {'Temp': 77.0},\n",
       " '2017-03-05': {'Temp': 73.0},\n",
       " '2017-03-06': {'Temp': 67.0},\n",
       " '2017-03-07': {'Temp': 62.0},\n",
       " '2017-03-08': {'Temp': 64.0},\n",
       " '2017-03-09': {'Temp': 67.0},\n",
       " '2017-03-10': {'Temp': 66.0},\n",
       " '2017-03-11': {'Temp': 81.0},\n",
       " '2017-03-12': {'Temp': 69.0},\n",
       " '2017-03-13': {'Temp': 66.0},\n",
       " '2017-03-14': {'Temp': 67.0},\n",
       " '2017-03-15': {'Temp': 69.0},\n",
       " '2017-03-16': {'Temp': 66.0},\n",
       " '2017-03-17': {'Temp': 68.0},\n",
       " '2017-03-18': {'Temp': 65.0},\n",
       " '2017-03-19': {'Temp': 74.0},\n",
       " '2017-03-20': {'Temp': 69.0},\n",
       " '2017-03-21': {'Temp': 72.0},\n",
       " '2017-03-22': {'Temp': 73.0},\n",
       " '2017-03-23': {'Temp': 72.0},\n",
       " '2017-03-24': {'Temp': 71.0},\n",
       " '2017-03-25': {'Temp': 76.0},\n",
       " '2017-03-26': {'Temp': 77.0},\n",
       " '2017-03-27': {'Temp': 76.0},\n",
       " '2017-03-28': {'Temp': 74.0},\n",
       " '2017-03-29': {'Temp': 68.0},\n",
       " '2017-03-30': {'Temp': 73.0},\n",
       " '2017-03-31': {'Temp': 71.0},\n",
       " '2017-04-01': {'Temp': 74.0},\n",
       " '2017-04-02': {'Temp': 75.0},\n",
       " '2017-04-03': {'Temp': 70.0},\n",
       " '2017-04-04': {'Temp': 67.0},\n",
       " '2017-04-05': {'Temp': 71.0},\n",
       " '2017-04-06': {'Temp': 67.0},\n",
       " '2017-04-07': {'Temp': 74.0},\n",
       " '2017-04-08': {'Temp': 77.0},\n",
       " '2017-04-09': {'Temp': 78.0},\n",
       " '2017-04-10': {'Temp': 67.0},\n",
       " '2017-04-11': {'Temp': 70.0},\n",
       " '2017-04-12': {'Temp': 69.0},\n",
       " '2017-04-13': {'Temp': 69.0},\n",
       " '2017-04-14': {'Temp': 74.0},\n",
       " '2017-04-15': {'Temp': 78.0},\n",
       " '2017-04-16': {'Temp': 71.0},\n",
       " '2017-04-17': {'Temp': 67.0},\n",
       " '2017-04-18': {'Temp': 68.0},\n",
       " '2017-04-19': {'Temp': 67.0},\n",
       " '2017-04-20': {'Temp': 76.0},\n",
       " '2017-04-21': {'Temp': 69.0},\n",
       " '2017-04-22': {'Temp': 72.0},\n",
       " '2017-04-23': {'Temp': 76.0},\n",
       " '2017-04-24': {'Temp': 68.0},\n",
       " '2017-04-25': {'Temp': 72.0},\n",
       " '2017-04-26': {'Temp': 74.0},\n",
       " '2017-04-27': {'Temp': 70.0},\n",
       " '2017-04-28': {'Temp': 67.0},\n",
       " '2017-04-29': {'Temp': 72.0},\n",
       " '2017-04-30': {'Temp': 60.0},\n",
       " '2017-05-01': {'Temp': 65.0},\n",
       " '2017-05-02': {'Temp': 75.0},\n",
       " '2017-05-03': {'Temp': 70.0},\n",
       " '2017-05-04': {'Temp': 75.0},\n",
       " '2017-05-05': {'Temp': 70.0},\n",
       " '2017-05-06': {'Temp': 79.0},\n",
       " '2017-05-07': {'Temp': 75.0},\n",
       " '2017-05-08': {'Temp': 70.0},\n",
       " '2017-05-09': {'Temp': 67.0},\n",
       " '2017-05-10': {'Temp': 74.0},\n",
       " '2017-05-11': {'Temp': 70.0},\n",
       " '2017-05-12': {'Temp': 75.0},\n",
       " '2017-05-13': {'Temp': 76.0},\n",
       " '2017-05-14': {'Temp': 77.0},\n",
       " '2017-05-15': {'Temp': 74.0},\n",
       " '2017-05-16': {'Temp': 74.0},\n",
       " '2017-05-17': {'Temp': 74.0},\n",
       " '2017-05-18': {'Temp': 69.0},\n",
       " '2017-05-19': {'Temp': 68.0},\n",
       " '2017-05-20': {'Temp': 76.0},\n",
       " '2017-05-21': {'Temp': 74.0},\n",
       " '2017-05-22': {'Temp': 71.0},\n",
       " '2017-05-23': {'Temp': 71.0},\n",
       " '2017-05-24': {'Temp': 74.0},\n",
       " '2017-05-25': {'Temp': 74.0},\n",
       " '2017-05-26': {'Temp': 74.0},\n",
       " '2017-05-27': {'Temp': 74.0},\n",
       " '2017-05-28': {'Temp': 80.0},\n",
       " '2017-05-29': {'Temp': 74.0},\n",
       " '2017-05-30': {'Temp': 72.0},\n",
       " '2017-05-31': {'Temp': 75.0},\n",
       " '2017-06-01': {'Temp': 80.0},\n",
       " '2017-06-02': {'Temp': 76.0},\n",
       " '2017-06-03': {'Temp': 76.0},\n",
       " '2017-06-04': {'Temp': 77.0},\n",
       " '2017-06-05': {'Temp': 75.0},\n",
       " '2017-06-06': {'Temp': 75.0},\n",
       " '2017-06-07': {'Temp': 75.0},\n",
       " '2017-06-08': {'Temp': 75.0},\n",
       " '2017-06-09': {'Temp': 72.0},\n",
       " '2017-06-10': {'Temp': 74.0},\n",
       " '2017-06-11': {'Temp': 74.0},\n",
       " '2017-06-12': {'Temp': 74.0},\n",
       " '2017-06-13': {'Temp': 76.0},\n",
       " '2017-06-14': {'Temp': 74.0},\n",
       " '2017-06-15': {'Temp': 75.0},\n",
       " '2017-06-16': {'Temp': 73.0},\n",
       " '2017-06-17': {'Temp': 79.0},\n",
       " '2017-06-18': {'Temp': 75.0},\n",
       " '2017-06-19': {'Temp': 72.0},\n",
       " '2017-06-20': {'Temp': 72.0},\n",
       " '2017-06-21': {'Temp': 74.0},\n",
       " '2017-06-22': {'Temp': 72.0},\n",
       " '2017-06-23': {'Temp': 72.0},\n",
       " '2017-06-24': {'Temp': 77.0},\n",
       " '2017-06-25': {'Temp': 71.0},\n",
       " '2017-06-26': {'Temp': 73.0},\n",
       " '2017-06-27': {'Temp': 76.0},\n",
       " '2017-06-28': {'Temp': 77.0},\n",
       " '2017-06-29': {'Temp': 76.0},\n",
       " '2017-06-30': {'Temp': 76.0},\n",
       " '2017-07-01': {'Temp': 79.0},\n",
       " '2017-07-02': {'Temp': 81.0},\n",
       " '2017-07-03': {'Temp': 76.0},\n",
       " '2017-07-04': {'Temp': 78.0},\n",
       " '2017-07-05': {'Temp': 77.0},\n",
       " '2017-07-06': {'Temp': 74.0},\n",
       " '2017-07-07': {'Temp': 75.0},\n",
       " '2017-07-08': {'Temp': 78.0},\n",
       " '2017-07-09': {'Temp': 78.0},\n",
       " '2017-07-10': {'Temp': 69.0},\n",
       " '2017-07-11': {'Temp': 72.0},\n",
       " '2017-07-12': {'Temp': 74.0},\n",
       " '2017-07-13': {'Temp': 74.0},\n",
       " '2017-07-14': {'Temp': 76.0},\n",
       " '2017-07-15': {'Temp': 80.0},\n",
       " '2017-07-16': {'Temp': 80.0},\n",
       " '2017-07-17': {'Temp': 76.0},\n",
       " '2017-07-18': {'Temp': 76.0},\n",
       " '2017-07-19': {'Temp': 76.0},\n",
       " '2017-07-20': {'Temp': 77.0},\n",
       " '2017-07-21': {'Temp': 77.0},\n",
       " '2017-07-22': {'Temp': 77.0},\n",
       " '2017-07-23': {'Temp': 82.0},\n",
       " '2017-07-24': {'Temp': 75.0},\n",
       " '2017-07-25': {'Temp': 77.0},\n",
       " '2017-07-26': {'Temp': 75.0},\n",
       " '2017-07-27': {'Temp': 76.0},\n",
       " '2017-07-28': {'Temp': 81.0},\n",
       " '2017-07-29': {'Temp': 82.0},\n",
       " '2017-07-30': {'Temp': 81.0},\n",
       " '2017-07-31': {'Temp': 76.0},\n",
       " '2017-08-04': {'Temp': 77.0},\n",
       " '2017-08-05': {'Temp': 82.0},\n",
       " '2017-08-06': {'Temp': 83.0},\n",
       " '2017-08-13': {'Temp': 77.0},\n",
       " '2017-08-14': {'Temp': 77.0},\n",
       " '2017-08-15': {'Temp': 77.0},\n",
       " '2017-08-16': {'Temp': 76.0},\n",
       " '2017-08-17': {'Temp': 76.0},\n",
       " '2017-08-18': {'Temp': 79.0}}"
      ]
     },
     "execution_count": 367,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "station_list = session.query(station.station,station.name).all()\n",
    "stations_dict = pd.DataFrame(station_list).set_index('station').to_dict()\n",
    "\n",
    "\n",
    "temp_dict = temp_df.set_index('Date').to_dict('index')\n",
    "\n",
    "trip_dict = trip_df.to_dict()\n",
    "\n",
    "prcp1 = prcp.groupby('date')['Precipitation'].mean()\n",
    "prcp2 = pd.DataFrame(prcp1)\n",
    "prcp_dict = prcp2.to_dict('seri')\n",
    "prcp_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "nteract": {
   "version": "0.12.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
